/* Let's start with a simple example of how to sort a list of strings 
	in prior versions of Java */

List<String> names = Arrays.asList("peter", "anna", "mike", "xenia");

Collections.sort(names, new Comparator<String>() {
	@Override
	public int compare(String a, String b){
		return b.compareTo(a);
	}
});

/* The static utility method Collections.sor accepts a list and a comparator in order to 	sort the elements of the given list. You often find yourself creating anonymous 		comparatorsand pass them to the sort method.
	
	Instead of creating anonymous objects all day long, Java 8 comes with a much shorter
	syntax, lambda expressions: */

Collections.sort(names, (String a, String b) -> {
	return b.compareTo(a);
});

// As you can see the code is much shorter and easier to read. But it gets even shorter

Collections.sort(names, (String a, String b) -> b.compareTo(a));

// The Java compiler is aware of the parameter types so you can skip them as well.
